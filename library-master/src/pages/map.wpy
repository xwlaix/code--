<template>
  <view class="map" >
    <Message :title.sync="title" ></Message>
    <map id="map" longitude="{{myLong}}" latitude="{{myLat}}" scale="14" markers="{{markers}}"  @markertap="markertap" @regionchange="regionchange" show-location style="width: 100%; height:{{height}}">
      <cover-view class='btn' style="background: white;width: 200rpx;position: absolute;right: 0;bottom: 12rpx;padding: 12rpx;">
        <cover-image src='/images/position.png'  @tap="moveToLocation" class='ten_l flo_l' style="width: 62rpx;height: 62rpx;margin-right: 22rpx;"></cover-image>
        <cover-image src='/images/search.png' @tap="goto('/pages/library/searchLibrary')" class='code flo_l' style="width: 68rpx;height: 68rpx;"></cover-image>
      </cover-view>
    </map>
  </view>
  <view style="height: 60rpx;border-bottom: 1rpx solid #dedede;padding: 12rpx 22rpx;">
      <image src="/images/icon-share1.png" mode="aspectFit"  style="width: 52rpx;height: 52rpx; margin-right: 12rpx;margin-top: 6rpx;" class="flo_l"></image>
      <span class="font_32">分享有福</span>
      <image src="/images/icon-new.png" mode="aspectFit"  style="width: 52rpx;height: 52rpx;margin-left: 12rpx;" ></image>
    <button class="btn flo_r" open-type="share" >
      <image src="/images/icon-share.png" mode="aspectFit"  style="width: 60rpx;height: 60rpx;" class="flo_r"></image>
    </button>
  </view>
  <block wx:if="{{myLong}}">
    <!--<navigator url="/pages/library/library?id={{distance_library.id}}"    hover-class="weui-cell_active">-->
      <view style="padding:32rpx 22rpx; background: white;" class="font_32" @tap="goto({{distance_library.url}})">
        <view>
          <view class="inline-block">
            {{distance_library.name}}
          </view>

          <view class="flo_r" style="color: #35bbe6">{{distance1}}km</view></br>
        </view>
        <view class="inline-block ellipsis_2 font_28" style="width: 92%;margin-top: 16rpx;color: #999999">
          {{distance_library.intro}}
        </view>
        <view class="flo_r bold" style="font-size: 46rpx; color: #35bbe6;margin-top: -62rpx;">></view>
      </view>
    <!--</navigator>-->
  </block>
  <block wx:else>
    <view class="font_32 text-center" style="background: white;padding: 12rpx;">{{text}}</view>
  </block>

</template>

<script>
  import wepy from 'wepy'
  import http from '../mixins/http'
  import base from '../mixins/base'
  import user from '../mixins/user'
  import ShareMessage from '../mixins/ShareMessage'
  import { service } from '../config.js'
  import message from '../components/message'

  export default class pageQr extends wepy.page {
    mixins = [base, http, user, ShareMessage]
    config = {
      navigationBarTitleText: '图书馆地图',
      enablePullDownRefresh: false
    }
    data = {
//      markers标记点
      markers: [],
      title: '为营造更好的读书气氛，欢迎各位书友创建共享图书馆！',
      longitude: 0,
      latitude: 0,
      myLong: '',
      myLat: '',
      distance1: '',
      libraries: '',
      distance_library: {},
      text: '',
      height: '',
      url: ''
    }
    components = {
      Message: message
    }
    watch = {
      text() {
        if (!this.myLong) {
          this.text = '需要您的位置，才能显示附近的图书馆哦！'
          this.$apply()
        }
      }
    }
    onShow() {
      this.updataMap()
      this.mapCtx = wx.createMapContext('map')
      this.getCenterLocation()
      this.getSystem()
      this.$parent.getTracker(this.$root.$name, this.config.navigationBarTitleText)
    }
//    onLoad() {
//
//    }
    updataMap() {
      let token = wx.getStorageSync('token')
      let myLong = wx.getStorageSync('myLong')
      let myLat = wx.getStorageSync('myLat')
      if (token) {
//        console.log(token)
        let that = this
        that.$put({
          url: service.updatemap,
          data: {
            location_latitude: myLat,
            location_longitude: myLong
          }
        }, {
          success: ({code, data}) => {

          },
          fail: ({code, data}) => {},
          complete: () => {
            this.loading = false
          }
        })
      }

    }
    getSystem() {
      let that = this
      wx.getSystemInfo({
        success: function(res) {
          that.height = res.screenHeight + 100 + 'rpx'
          that.$apply()
        }
      })
    }

    getCenterLocation() {
      let that = this
      wx.getLocation({
        type: 'gcj02',
        success: function(res) {
          that.myLong = res.longitude
          that.myLat = res.latitude
          wx.setStorageSync('myLong', res.longitude)
          wx.setStorageSync('myLat', res.latitude)
          that.mapFunction()
          that.$apply()
        },
        fail: function () {
          wx.showModal({
            title: '提示',
            confirmText: '去授权',
            content: '不授权将无法查看地图哦！',
            success: (res) => {
              if (res.confirm) {
                that.openSetting()
              }
            }
          })
        }
      })
    }
    mapFunction() {
      let that = this
      that.$get({
        url: service.maps,
        data: {
          location_latitude: that.myLat,
          location_longitude: that.myLong,
          my_location_longitude: that.myLong,
          my_location_latitude: that.myLat
        }
      }, {
        success: ({code, data}) => {
          that.distance1 = data.distance1
          that.distance_library = data.distance_library

          if (that.distance_library.type == 'SHARE') {
            that.distance_library.url = '/pages/library/shareLibrary?id=' + that.distance_library.id
            that.$apply()
          } else {
            that.distance_library.url = '/pages/library/library?id=' + that.distance_library.id
            that.$apply()
          }
          console.log(that.distance_library)
          that.libraries = data.libraries
          let markersNew = []
          that.libraries.forEach((item, index, arr) => {
            markersNew.push(
              {
                iconPath: '/images/icon-position.png',
                id: item.id,
                latitude: item.location_latitude,
                longitude: item.location_longitude,
                width: 30,
                height: 30,
                callout: {
                  content: item.name,
                  color: '#2c8df6',
                  fontSize: 14,
                  borderRadius: 6,
                  bgColor: '#fff',
                  padding: 6,
                  display: 'BYCLICK',
                  boxShadow: '2px 2px 10px #aaa'
                }
              }
            )
          })
          that.markers = markersNew
          that.$apply()
          that.noMoreList = false
        },
        fail: ({code, data}) => {},
        complete: () => {
          this.loading = false
        }
      })
    }
    openSetting() {
      let that = this
      wepy.openSetting({
        success: (res) => {
          wepy.getLocation({
            altitude: true,
            type: 'gcj02',
            success: function (res) {
              that.myLat = res.latitude
              that.myLong = res.longitude
              that.$apply()
              that.mapFunction()
            },
            fail: function () {
            },
            complete: function () {
            }
          })
        }
      })
    }

    getLngLat() {
      let that = this
      that.mapCtx = wx.createMapContext('map')
      that.mapCtx.getCenterLocation({
        success: function (res) {
          that.longitude = res.longitude
          that.latitude = res.latitude
          that.$apply()
          let data = {
            location_latitude: that.latitude,
            location_longitude: that.longitude,
            my_location_longitude: that.myLong,
            my_location_latitude: that.myLat
          }
          that.$get({
            url: service.maps,
            data: data
          }, {
            success: ({code, data}) => {
              that.distance1 = data.distance1
              that.distance_library = data.distance_library
              if (that.distance_library.type == 'SHARE') {
                that.distance_library.url = '/pages/library/shareLibrary?id=' + that.distance_library.id
                that.$apply()
              } else {
                that.distance_library.url = '/pages/library/library?id=' + that.distance_library.id
                that.$apply()
              }
              let markersNew = []
              that.libraries.forEach((item, index, arr) => {
                if (arr[index].id == that.distance_library.id) {
                  markersNew.push(
                    {
                      iconPath: '/images/icon-position_red.png',
                      id: item.id,
                      latitude: item.location_latitude,
                      longitude: item.location_longitude,
                      width: 30,
                      height: 30,
                      callout: {
                        content: item.name,
                        color: '#2c8df6',
                        fontSize: 14,
                        borderRadius: 6,
                        bgColor: '#fff',
                        padding: 6,
                        display: 'BYCLICK',
                        boxShadow: '2px 2px 10px #aaa'
                      }
                    }
                  )
                } else {
                  markersNew.push(
                    {
                      iconPath: '/images/icon-position.png',
                      id: item.id,
                      latitude: item.location_latitude,
                      longitude: item.location_longitude,
                      width: 30,
                      height: 30,
                      callout: {
                        content: item.name,
                        color: '#2c8df6',
                        fontSize: 14,
                        borderRadius: 6,
                        bgColor: '#fff',
                        padding: 6,
                        display: 'BYCLICK',
                        boxShadow: '2px 2px 10px #aaa'
                      }
                    }
                  )
                }
              })
              that.markers = markersNew
              that.markers.push(
                {
                  id: 0,
                  iconPath: '/images/icon-label.png',
                  longitude: res.longitude,
                  latitude: res.latitude,
                  width: 30,
                  height: 30
                }
              )
              that.$apply()
            },
            fail: ({code, data}) => {
            },
            complete: () => {
            }
          })
        }
      })
    }
    distance() {
      let to = ''
      this.markers.forEach((item, index, arr) => {
        to = arr[index].latitude + ',' + arr[index].longitude
      })
      let data = {
        mode: 'driving',
        from: this.latitude + ',' + this.longitude,
        to: to,
        key: 'DQ3BZ-SWT3U-HUQV7-BBO3U-OU7WS-53FBV'
      }
      let url = 'http://apis.map.qq.com/ws/distance/v1/'
      this.$get({url: url, data}, {
        success: ({code, data}) => {
          debugger
          wx.setStorageSync('is_new', data.user.is_news)
          if (data.user.is_news) {
            wepy.showTabBarRedDot({
              index: 4
            })
          } else {
            wepy.hideTabBarRedDot({
              index: 4
            })
          }
        }
      })
    }
    methods = {
      goto(url) {
        wx.navigateTo({url: url})
      },
      moveToLocation() {
        this.mapCtx.moveToLocation()
        if (!this.myLat) {
          return wx.showModal({
            title: '提示',
            confirmText: '去授权',
            content: '不授权无法查看图书馆的位置哦！',
            success: (res) => {
              if (res.confirm) {
                this.openSetting()
              }
            }
          })
        }
      },
      translateMarker() {
        this.mapCtx.translateMarker({
          markerId: 0,
          autoRotate: true,
          duration: 1000,
          destination: {
            latitude: 23.10229,
            longitude: 113.3345211
          },
          animationEnd() {
            console.log('animation end')
          }
        })
      },
      regionchange(e) {
        // console.log(e.type)
        // let that = this
        // if (e.type == 'end') {
        //   this.getLngLat()
        // } else {
        //   this.mapCtx.getCenterLocation({
        //     success: function (res) {
        //       that.longitude = res.longitude
        //       that.latitude = res.latitude
        //       that.$apply()
        //     }
        //   })
        //   this.markers.forEach((item, index) => {
        //     if (item.id == 0) {
        //       console.log(index)
        //       this.markers.splice(index, 1)
        //     }
        //   })
        // }
      },
      markertap(e) {
        console.log(e.markerId)
        let that = this
        let data = {
          my_location_longitude: that.myLong,
          my_location_latitude: that.myLat
        }
        that.$get({
          url: service.libraries + '/' + e.markerId + '/infor',
          data: data
        }, {
          success: ({code, data}) => {
            that.distance1 = data.distance
            that.distance_library = data.library
            if (that.distance_library.type == 'SHARE') {
              that.distance_library.url = '/pages/library/shareLibrary?id=' + that.distance_library.id
              that.$apply()
            } else {
              that.distance_library.url = '/pages/library/library?id=' + that.distance_library.id
              that.$apply()
            }
            that.$apply()
          },
          fail: ({code, data}) => {
          },
          complete: () => {
          }
        })
        that.markers.forEach((item, index, arr) => {
          if (arr[index].id == e.markerId && arr[index].id !== 0) {
             arr[index].iconPath = '/images/icon-position_red.png'
          }
          if (arr[index].id !== e.markerId && arr[index].id !== 0) {
            arr[index].iconPath = '/images/icon-position.png'
          }
          if (arr[index].id == 0) {
             that.markers.splice(index, 1)
          }
        })
//        that.markers = markers_new
      }
    }
  }
</script>

<style lang="less">
  page{
    background: white;
  }
</style>
